{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<p>\u8fd9\u91cc\u662f Franklin Cao \u7684\u4e2a\u4eba\u535a\u5ba2\uff0c</p> <p>\u8bb0\u5f55\u4e86\u6211\u5728\u5de5\u4f5c\u548c\u5b66\u4e60\u4e2d\u7684\u6240\u601d\u6240\u60f3\u3002 </p>"},{"location":"blogs/cpp/01_endianess/","title":"\u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u65f6\u7684 \u201c\u5927\u5c0f\u7aef\u201d \u95ee\u9898","text":""},{"location":"blogs/cpp/01_endianess/#_2","title":"\u5f15\u8a00","text":"<p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u95f4\u901a\u4fe1\u65f6\u5e38\u5e38\u9700\u8981\u62df\u5b9a\u901a\u4fe1\u534f\u8bae\uff0c\u4f5c\u4e3a\u901a\u4fe1\u53cc\u65b9\u5171\u540c\u9075\u5b88\u7684\u89c4\u5219\u3002\u534f\u8bae\u4e2d\u5e38\u5e38\u9700\u8981\u4f20\u9012\u6570\u5b57\u7c7b\u578b\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u6e29\u5ea6\u4f20\u611f\u5668\u4e0a\u62a5\u5f53\u524d\u6e29\u5ea6\uff08\u4e00\u4e2a\u6709\u7b26\u53f7\u7684\u5c0f\u6570\uff09\uff0c\u8bbe\u7f6e\u5de5\u4f5c\u6a21\u5f0f\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff09\u7b49\u7b49\u3002</p> <p>\u53d1\u9001\u6570\u5b57\u4fe1\u606f\uff0c\u76f4\u63a5\u53d1\u9001\u5185\u5b58\u4e2d\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b9\u5f0f\u901f\u5ea6\u5feb\u3001\u5360\u7528\u5e26\u5bbd\u4f4e\uff0c\u65e0\u9700\u5bf9\u6570\u636e\u505a\u989d\u5916\u7f16\u7801\u6216\u89e3\u6790\u3002\u7136\u800c\u4e0d\u540c\u7cfb\u7edf\u4e2d\u5bf9\u4e8e\u540c\u6837\u4e00\u6bb5\u5185\u5b58\u7684\u89e3\u91ca\u53ef\u80fd\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u867d\u7136\u8fd9\u79cd\u65b9\u5f0f\u6548\u7387\u5f88\u9ad8\uff0c\u4f46\u4e5f\u5e26\u6765\u4e86\u4e00\u4e2a\u81f3\u5173\u91cd\u8981\u7684\u95ee\u9898\uff1a\u5927\u5c0f\u7aef\u5e8f\uff08endianness\uff09\u3002</p> <p>\u5927\u5c0f\u7aef\u95ee\u9898\u672c\u8d28\u4e0a\u662f\u4e0d\u540c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u5728\u5b58\u50a8\u591a\u5b57\u8282\u6570\u636e\u65f6\u7684\u987a\u5e8f\u5dee\u5f02\u3002\u8fd9\u79cd\u5dee\u5f02\u4f1a\u5bfc\u81f4\u53d1\u9001\u7aef\u548c\u63a5\u6536\u7aef\u5bf9\u76f8\u540c\u7684\u6570\u636e\u5b57\u8282\u6709\u4e0d\u540c\u7684\u89e3\u91ca\uff0c\u4ece\u800c\u5bfc\u81f4\u6570\u636e\u89e3\u6790\u51fa\u9519\u3002\u56e0\u6b64\u8de8\u5e73\u53f0\u901a\u4fe1\u65f6\uff0c\u5fc5\u987b\u6b63\u786e\u5904\u7406\u5927\u5c0f\u7aef\u95ee\u9898\uff0c\u624d\u80fd\u786e\u4fdd\u6570\u636e\u7684\u51c6\u786e\u4f20\u8f93\u548c\u89e3\u6790\u3002</p> <p>\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u63a2\u8ba8\u5927\u5c0f\u7aef\u95ee\u9898\u7684\u672c\u8d28\uff0c\u5206\u6790\u5b83\u5bf9\u4e8c\u8fdb\u5236\u6570\u636e\u4f20\u8f93\u534f\u8bae\u7684\u5177\u4f53\u5f71\u54cd\uff0c\u5e76\u4ecb\u7ecd\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u901a\u8fc7\u5408\u9002\u7684\u6280\u672f\u624b\u6bb5\u6b63\u786e\u5904\u7406\u548c\u8f6c\u6362\u5b57\u8282\u5e8f\u3002</p>"},{"location":"blogs/cpp/01_endianess/#_3","title":"\u4ec0\u4e48\u662f\u5927\u5c0f\u7aef","text":"<p>\u5728\u4e8c\u8fdb\u5236\u6570\u636e\u4f20\u8f93\u6216\u5b58\u50a8\u4e2d\uff0c\u6570\u636e\u7684\u5b57\u8282\u987a\u5e8f\u51b3\u5b9a\u4e86\u7cfb\u7edf\u5982\u4f55\u7406\u89e3\u548c\u89e3\u91ca\u591a\u5b57\u8282\u7684\u6570\u636e\u503c\u3002\u89e3\u91ca\u5b57\u8282\u7684\u987a\u5e8f\u53ef\u4ee5\u5206\u4e3a\u5927\u7aef\u5e8f\uff08Big Endian\uff09\u548c\u5c0f\u7aef\u5e8f\uff08Little Endian\uff09\u4e24\u79cd\u3002</p> <p>\u5728\u5927\u7aef\u5e8f\u7684\u7cfb\u7edf\u4e2d\uff0c\u9ad8\u4f4d\u5b57\u8282\uff08\u4e5f\u5c31\u662f\u6743\u91cd\u9ad8\u7684\u5b57\u8282\uff09\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\uff0c\u4f4e\u4f4d\u5b57\u8282\uff08\u4e5f\u5c31\u662f\u6743\u91cd\u4f4e\u7684\u5b57\u8282\uff09\u5b58\u50a8\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u3002\u5927\u7aef\u5e8f\u7684\u6392\u5217\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u4eba\u4eec\u4e66\u5199\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u5373\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5b58\u50a8\uff0c\u6bd4\u8f83\u7b26\u5408\u4eba\u7c7b\u7684\u76f4\u89c9\u3002</p> <p>\u6570\u503c <code>BE BA FE CA</code>\uff08\u5341\u516d\u8fdb\u5236\uff09\u5728\u5927\u7aef\u5e8f\u4e2d\u4f1a\u6309\u5982\u4e0b\u65b9\u5f0f\u5b58\u50a8\uff1a</p> <pre><code>\u5730\u5740\uff1a  01 02 03 04\n\u5185\u5bb9\uff1a  BE BA FE CA\n</code></pre> <p>\u4e0e\u5927\u7aef\u5e8f\u76f8\u53cd\uff0c\u5c0f\u7aef\u5e8f\u7cfb\u7edf\u5c06\u4f4e\u4f4d\u5b57\u8282\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\uff0c\u800c\u9ad8\u4f4d\u5b57\u8282\u5b58\u50a8\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u3002\u5373\u4ece\u53f3\u5230\u5de6\u7684\u65b9\u5f0f\u6392\u5217\u3002</p> <p>\u6570\u503c <code>BE BA FE CA</code>\uff08\u5341\u516d\u8fdb\u5236\uff09\u5728\u5c0f\u7aef\u5e8f\u4e2d\u4f1a\u6309\u5982\u4e0b\u65b9\u5f0f\u5b58\u50a8\uff1a</p> <p><pre><code>\u5730\u5740\uff1a  01 02 03 04\n\u5185\u5bb9\uff1a  CA FE BA BE\n</code></pre> </p> <p>\u6240\u4ee5\u5982\u679c\u53d1\u9001\u7aef\u4e3a\u5927\u7aef\u7cfb\u7edf\uff0c\u53d1\u9001\u7684\u6570\u5b57\u4e3a <code>BE BA FE CA</code>\uff0c\u5728\u4e0d\u8003\u8651\u5927\u5c0f\u7aef\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u5c06\u5185\u5b58\u4e2d\u7684\u56db\u4e2a\u5b57\u8282\u53d1\u51fa\u3002\u5c0f\u7aef\u7cfb\u7edf\u6536\u5230\u540e\uff0c\u540c\u6837\u4e0d\u8003\u8651\u5927\u5c0f\u7aef\u95ee\u9898\uff0c\u76f4\u63a5\u89e3\u6790\uff0c\u5c31\u4f1a\u8ba4\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u8282 <code>0xBE</code> \u7684\u6743\u91cd\u6700\u4f4e\uff0c\u8ba4\u4e3a\u6700\u540e\u4e00\u4e2a\u5b57\u8282 <code>0xCA</code> \u6743\u91cd\u6700\u9ad8\uff08\u5c3d\u7ba1\u8fd9\u5b8c\u5168\u4e0d\u662f\u53d1\u9001\u65b9\u7684\u672c\u610f\uff09\uff0c\u4ece\u800c\u5c06\u8fd9\u4e2a\u6570\u5b57\u89e3\u91ca\u4e3a <code>CA FE BA BE</code>\u3002</p> <p>\u89e3\u51b3\u5927\u5c0f\u7aef\u95ee\u9898\u6700\u76f4\u63a5\u6709\u6548\u7684\u65b9\u6cd5\u5c31\u662f\u7edf\u4e00\u5b57\u8282\u5e8f\u3002\u53ef\u4ee5\u8ba4\u4e3a\u5730\u89c4\u5b9a\u4f20\u8f93\u534f\u8bae\u4e2d\u6240\u6709\u6570\u5b57\u5747\u4e3a\u5927\u7aef\u5e8f\u3002\u5728\u8bb8\u591a\u7f51\u7edc\u534f\u8bae\u4e2d\uff0c\u7edf\u4e00\u5b57\u8282\u5e8f\u7684\u9009\u62e9\u5f80\u5f80\u662f\u5927\u7aef\u5e8f\uff08Big Endian\uff09\uff0c\u5e76\u88ab\u79f0\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f\uff08Network Byte Order\uff09\u3002\u4f7f\u7528\u5927\u7aef\u5e8f\u4f5c\u4e3a\u6807\u51c6\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u5927\u7aef\u5e8f\u7684\u5b57\u8282\u6392\u5217\u65b9\u5f0f\u4e0e\u4eba\u4eec\u4e66\u5199\u6570\u5b57\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u76f8\u5bf9\u76f4\u89c2\u4e14\u6613\u4e8e\u7406\u89e3\u3002</p> <p>\u4f8b\u5982\uff0c\u5728 TCP/IP \u534f\u8bae\u4e2d\u65e0\u8bba\u662f\u5728\u6570\u636e\u62a5\u5934\u4e2d\u8868\u793a IP \u5730\u5740\u3001\u7aef\u53e3\u53f7\uff0c\u8fd8\u662f\u4f20\u8f93\u534f\u8bae\u4e2d\u7684\u5176\u4ed6\u6570\u503c\u5b57\u6bb5\uff0c\u6240\u6709\u6570\u636e\u90fd\u6309\u7167\u5927\u7aef\u5e8f\u6392\u5217\u3002\u8be5\u6807\u51c6\u786e\u4fdd\u4e86\u6570\u636e\u5728\u4e0d\u540c\u7cfb\u7edf\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\u4e0e\u53ef\u79fb\u690d\u6027\u3002</p> <p>\u7136\u800c\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u8ba1\u7b97\u673a\u548c\u5d4c\u5165\u5f0f\u8bbe\u5907\u90fd\u91c7\u7528\u5c0f\u7aef\u5e8f\uff0c\u53ea\u6709\u7f51\u7edc\u5b57\u8282\u5e8f\u4ecd\u7136\u91c7\u7528\u5927\u7aef\u5e8f\u3002</p> <p></p>"},{"location":"blogs/cpp/01_endianess/#_4","title":"\u5927\u5c0f\u7aef\u8f6c\u6362\u7684\u624b\u52a8\u5b9e\u73b0","text":"<p>\u4e0b\u9762\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5b8c\u6210\u51e0\u4e2a\u5e38\u89c1\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u7aef\u8f6c\u6362</p> <p>uint8_t \u7c7b\u578b</p> <p><code>uint8_t</code> \u662f\u5355\u5b57\u8282\u7c7b\u578b\uff0c\u4e0d\u5b58\u5728\u5b57\u8282\u5e8f\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u65e0\u9700\u8f6c\u6362\u3002</p> <p>uint16_t \u7c7b\u578b</p> <p><code>uint16_t</code> \u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u53ea\u9700\u5c06\u7b2c 1 \u4e2a\u5b57\u8282\u53d6\u51fa\u540e\u53f3\u79fb 8 \u4f4d\uff0c\u518d\u5c06\u7b2c 2 \u4e2a\u5b57\u8282\u53d6\u51fa\u5de6\u79fb 8 \u4f4d\uff0c\u6700\u540e\u5c06\u4e24\u8005\u901a\u8fc7\u6216\u8fd0\u7b97\u62fc\u8d77\u6765\u5373\u53ef\u3002</p> <pre><code>uint16_t SwapUint16T(const uint16_t &amp;value)\n{\n    return ((value &amp; 0xff00) &gt;&gt; 8) | ((value &amp; 0x00ff) &lt;&lt; 8);\n}\n</code></pre> <p>uint32_t \u7c7b\u578b</p> <p><code>uint32_t</code> \u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u548c <code>uint16_t</code> \u7c7b\u578b\u76f8\u4f3c\uff0c\u4f46\u662f\u5206\u522b\u8981\u5206\u522b\u53d6\u51fa\u7b2c 1\u30012\u30013\u30014 \u4e2a\u5b57\u8282\uff0c\u7136\u540e\u901a\u8fc7\u5de6\u79fb\u6216\u53f3\u79fb\u5c06\u5b57\u8282\u8c03\u6362\u5230\u4e0e\u5176\u539f\u4f4d\u7f6e\u5bf9\u79f0\u7684\u4f4d\u7f6e\uff0c\u6700\u540e\u5c06\u6240\u6709\u8c03\u6574\u597d\u4f4d\u7f6e\u7684\u5b57\u8282\u901a\u8fc7\u6216\u8fd0\u7b97\u62fc\u8d77\u6765\u5373\u53ef\u3002</p> <pre><code>uint32_t SwapUint32T(const uint32_t &amp;value)\n{\n    return ((value &amp; 0xff000000) &gt;&gt; 24) | ((value &amp; 0x00ff0000) &gt;&gt; 8) | \n           ((value &amp; 0x0000ff00) &lt;&lt; 8)  | ((value &amp; 0x000000ff) &lt;&lt; 24);\n}\n</code></pre> <p>uint64_t \u7c7b\u578b</p> <p><code>uint64_t</code> \u901a\u5e38\u5360\u7528 8 \u4e2a\u5b57\u8282\uff0c\u548c <code>uint32_t</code> \u7c7b\u578b\u76f8\u4f3c\uff0c\u4f9d\u7136\u662f\u53d6\u51fa\u5404\u4e2a\u5b57\u8282\uff0c\u8c03\u6574\u4f4d\u7f6e\u540e\u62fc\u8d77\u6765\uff0c\u53ea\u662f\u5171\u9700\u8981\u53d6\u51fa 8 \u6b21\uff0c\u7a0d\u663e\u7e41\u590d\u3002</p> <pre><code>uint64_t SwapUint64T(const uint64_t &amp;value)\n{\n    return ((value &amp; 0xff00000000000000) &gt;&gt; 56) | ((value &amp; 0x00ff000000000000) &gt;&gt; 40) |\n           ((value &amp; 0x0000ff0000000000) &gt;&gt; 24) | ((value &amp; 0x000000ff00000000) &gt;&gt; 8)  |\n           ((value &amp; 0x00000000ff000000) &lt;&lt; 8)  | ((value &amp; 0x0000000000ff0000) &lt;&lt; 24) |\n           ((value &amp; 0x000000000000ff00) &lt;&lt; 40) | ((value &amp; 0x00000000000000ff) &lt;&lt; 56);\n}\n</code></pre> <p>float \u7c7b\u578b</p> <p><code>float</code> \u7c7b\u578b\u901a\u5e38\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7531\u4e8e <code>float</code> \u7c7b\u578b\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u4e0e\u8fd0\u7b97\uff0c\u4e5f\u4e0d\u80fd\u5de6\u79fb\u6216\u53f3\u79fb\uff0c\u4f46\u662f\u8fd9\u91cc\u5904\u7406\u7684\u662f\u5b57\u8282\u6570\u636e\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06 float \u5185\u5b58\u590d\u5236\u5230\u540c\u6837\u5360\u7528 4 \u4e2a\u5b57\u8282\u7684 <code>uint32_t</code> <code>uint32_t</code> \u7684\u65b9\u6cd5\u8fdb\u884c\u5b57\u8282\u8c03\u6362\uff0c\u6700\u540e\u518d\u5c06\u8c03\u6362\u5b8c\u6210\u7684 <code>uint32_t</code> \u7c7b\u578b\u91cd\u65b0\u590d\u5236\u5230 <code>float</code> \u6570\u636e\u4e2d\u8fd4\u56de\u5373\u53ef\u3002</p> <pre><code>float SwapFloat(const float &amp;value)\n{\n    uint32_t originBit{};\n    std::memcpy(&amp;originBit, &amp;value, sizeof(float));\n    uint32_t swappedBit = SwapUint32T(originBit);\n\n    float ret{};\n    std::memcpy(&amp;ret, &amp;swappedBit, sizeof(float));\n    return ret;\n}\n</code></pre> <p>double \u7c7b\u578b</p> <p><code>double</code> \u7c7b\u578b\u901a\u5e38 8 \u4e2a\u5b57\u8282\uff0c\u548c <code>float</code> \u7c7b\u578b\u4e00\u6837\uff0c\u4e5f\u65e0\u6cd5\u8fdb\u884c\u4e0e\u548c\u5de6\u53f3\u79fb\u8fd0\u7b97\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5c06 <code>double</code> \u6240\u6301\u6709\u7684\u5185\u5b58\u590d\u5236\u5230\u540c\u6837\u5360\u7528 8 \u4e2a\u5b57\u8282\u7684 <code>uint64_t</code> \uff0c\u5e76\u6309\u7167 <code>uint64_t</code> \u5904\u7406\uff0c\u6700\u540e\u518d\u91cd\u65b0\u590d\u5236\u5230 <code>double</code> \u4e2d\u8fd4\u56de\u5373\u53ef\u3002</p> <pre><code>double SwapDouble(const double &amp;value)\n{\n    uint64_t originBit{};\n    std::memcpy(&amp;originBit, &amp;value, sizeof(double));\n    uint64_t swappedBit = SwapUint64T(originBit);\n\n    double ret{};\n    std::memcpy(&amp;ret, &amp;swappedBit, sizeof(double));\n    return ret;\n}\n</code></pre> <p>\u4e0b\u9762\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u6d4b\u8bd5 <code>uint16_t</code> \u7684\u5927\u5c0f\u7aef\u8f6c\u6362\u51fd\u6570\uff1a</p> <pre><code>void TestShort()\n{\n    uint16_t value = 0x1234;\n    uint16_t swapped = SwapUint16T(value);\n\n    std::cout &lt;&lt; \"origin:  \" &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; value &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"swapped: \" &lt;&lt; std::hex &lt;&lt; std::showbase &lt;&lt; swapped &lt;&lt; std::endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a <pre><code>origin:  0x1234\nswapped: 0x3412\n</code></pre></p> <p>\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528\u7684\u662f\u4eba\u755c\u65e0\u5bb3\u7684\u65e0\u7b26\u53f7\u7c7b\u578b <code>uint16_t</code> \u4f20\u5165\u6d4b\u8bd5\uff0c\u88ab\u6d4b\u8bd5\u7684\u51fd\u6570 <code>SwapUint16T</code> \u63a5\u53d7\u548c\u8fd4\u56de\u7684\u53c2\u6570\u4e5f\u90fd\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\u3002</p> <p>\u4f46\u662f\u5982\u679c\u6539\u4f20\u5165\u6709\u7b26\u53f7\u7c7b\u578b <code>int16_t</code> \u5462\uff0c\u4f1a\u6709\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u95ee\u9898\u5417\u3002</p> <p>\u662f\u7684\uff0c\u7684\u786e\u4f1a\u53d1\u751f <code>int16_t</code> \u5411 <code>uint16_t</code> \u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u4f46\u5f88\u5e78\u8fd0\u4e0d\u4f1a\u6709\u95ee\u9898\u3002</p> <p>\u5982\u679c <code>int16_t</code> \u7c7b\u578b\u7684\u503c\u4e3a\u6b63\u6570\uff0c\u90a3\u4e48\u76f8\u5b89\u65e0\u4e8b\uff0c\u5982\u679c <code>int16_t</code> \u7c7b\u578b\u7684\u503c\u4e3a\u8d1f\u6570\uff0c\u6839\u636e\u7c7b\u578b\u8f6c\u6362\u89c4\u5219\uff0c\u76ee\u6807\u7c7b\u578b\u662f\u65e0\u7b26\u53f7\u6574\u6570\u65f6\uff0c\u6e90\u6574\u6570\u4f1a\u88ab\u8f6c\u6362\u4e3a\u76ee\u6807\u7c7b\u578b\u6240\u80fd\u8868\u793a\u7684\u6700\u5c0f\u7684\u65e0\u7b26\u53f7\u6574\u6570\u3002\u8f6c\u6362\u7684\u89c4\u5219\u662f\u5c06\u6e90\u6574\u6570\u5bf9 2^n \uff08n \u4e3a\u8be5\u7c7b\u578b\u6240\u5360\u7684\u4f4d\u6570\uff09\u53d6\u6a21\u3002</p> <p>\u4f46\u662f\uff0c\u65e0\u8bba\u662f\u4ee5\u4e0a\u4e24\u79cd\u4e2d\u7684\u54ea\u79cd\u60c5\u51b5\uff0c\u90fd\u53ea\u662f\u5bf9\u4e8e\u5b57\u8282\u7684\u5185\u5bb9\u7684\u91cd\u65b0\u89e3\u91ca\uff0c\u4ece\u5b57\u8282\u7684\u89d2\u5ea6\u770b\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u56e0\u6b64\u4e0d\u4f1a\u5f71\u54cd\u5b57\u8282\u7ea7\u522b\u7684\u4f4d\u7f6e\u8c03\u6362\u64cd\u4f5c\u3002</p> <p>C++ \u6807\u51c6\u8349\u6848\u4e2d\uff0c\u4e5f\u540c\u6837\u8868\u8ff0\u4e86\u6709\u7b26\u53f7\u6570\u5411\u65e0\u7b26\u53f7\u6570\u7684\u8f6c\u6362\u89c4\u5219\uff0c\u4ee5\u53ca\u5982\u679c\u4e0d\u53d1\u751f\u622a\u65ad\uff0c\u8f6c\u6362\u4ec5\u53d1\u751f\u5728\u8bed\u4e49\u5c42\u9762\uff0c\u800c\u4e0d\u4f1a\u6539\u53d8\u4e8c\u8fdb\u5236\u4f4d\u5c42\u9762\u7684\u5185\u5bb9\u3002</p> <p>C++17 - N4713 - 7.8 Integral conversions</p> <p>If the destination type is unsigned, the resulting value is the least unsigned integer congruent to the source integer (modulo 2^n where n is the number of bits used to represent the unsigned type). [ Note: In a two\u2019s complement representation, this conversion is conceptual and there is no change in the bit pattern (if there is no truncation). \u2014 end note ]</p> <p>\u4f46\u662f\u5982\u679c\u53cd\u8fc7\u6765\u4f20\u9012\u5462\uff0c\u5982\u679c SwapUint16T \u63a5\u53d7\u7684\u662f <code>int16_t</code>\uff0c\u4f46\u662f\u5c06 <code>uint16_t</code> \u7c7b\u578b\u7684\u6570\u5b57\u4f20\u5165\uff0c\u4f1a\u53d1\u751f\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u5417\uff1f</p> <p>\u662f\u7684\uff0c\u4f1a\u53d1\u751f\u7531 <code>uint16_t</code> \u5411 <code>int16_t</code> \u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u4f46\u662f\u5c31\u6ca1\u6709\u521a\u624d\u90a3\u4e48\u5e78\u8fd0\u4e86\u3002</p> <p>\u65e0\u7b26\u53f7\u7c7b\u578b\u5411\u6709\u7b26\u53f7\u7c7b\u578b\u7684\u9690\u5f0f\u8f6c\u6362\u662f\u5b9e\u73b0\u5b9a\u4e49\u884c\u4e3a</p> <p>\u4e00\u65e6 <code>uint16_t</code> \u6240\u8868\u793a\u7684\u5185\u5bb9\u8d85\u51fa\u4e86 <code>int16_t</code> \u8868\u793a\u7684\u8303\u56f4\uff08\u5f88\u53ef\u80fd\u53d1\u751f\uff09\uff0c\u8fd9\u79cd\u8f6c\u6362\u5c06\u662f\u5b9e\u73b0\u5b9a\u4e49\u884c\u4e3a\uff0c\u4e5f\u5c31\u662f\u4f9d\u8d56\u4e8e\u7f16\u8bd1\u5668\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u4e0d\u540c\u7f16\u8bd1\u5668\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002\u53ef\u80fd\u662f\u62a5\u9519\uff0c\u53ef\u80fd\u662f\u8b66\u544a\uff0c\u53ef\u80fd\u662f\u4f60\u4e0d\u77e5\u9053\u7684\u5176\u4ed6\u7ed3\u679c\u3002\u7a0b\u5e8f\u8bbe\u8ba1\u65f6\u5e94\u8be5\u7aed\u5c3d\u5168\u529b\u907f\u514d\u8fd9\u4e9b\u4e0d\u786e\u5b9a\u7684\u884c\u4e3a\u3002</p> <p>C++ 17 \u6807\u51c6\u8349\u6848\u4e2d\u4e2d\u4e5f\u63d0\u5230\uff0c\u8fd9\u662f\u5b9e\u73b0\u5b9a\u4e49\u7684\u3002</p> <p>C++17 - N4713 - 7.8 Integral conversions</p> <p>If the destination type is signed, the value is unchanged if it can be represented in the destination type; otherwise, the value is implementation-defined.</p> <p>\u6240\u4ee5\u5982\u679c\u8981\u505a\u4f4d\u64cd\u4f5c\uff0c\u5c3d\u53ef\u80fd\u7edf\u4e00\u4f7f\u7528\u65e0\u7b26\u53f7\u7c7b\u578b\u64cd\u4f5c\u3002</p> <p>\u6b64\u524d\uff0c\u5c06 <code>float</code> \u6570\u636e\u6309\u7167 <code>uint32_t</code> \u6570\u636e\u5904\u7406\u524d\u6709\u4e00\u6b65\u9884\u5904\u7406\u64cd\u4f5c\uff1a\u5c06 <code>float</code> \u6570\u636e\u4e2d\u7684\u5185\u5b58\u9010\u4e2a\u5b57\u8282\u62f7\u8d1d\u5230\u4e86\u53e6\u4e00\u4e2a <code>uint32_t</code> \u6570\u636e\u4e2d\u3002\u8fd4\u56de\u65f6\uff0c\u518d\u5c06\u8c03\u6574\u597d\u5b57\u8282\u987a\u5e8f\u7684 <code>uint32_t</code> \u6570\u636e\u91cd\u65b0\u62f7\u8d1d\u5230 <code>float</code> \u6570\u636e\u4e2d\u7528\u4e8e\u8fd4\u56de\u3002</p> <pre><code>float SwapFloat(const float &amp;value)\n{\n    uint32_t originBit{};\n    std::memcpy(&amp;originBit, &amp;value, sizeof(float));\n    uint32_t swappedBit = SwapUint32T(originBit);\n\n    float ret{};\n    std::memcpy(&amp;ret, &amp;swappedBit, sizeof(float));\n    return ret;\n}\n</code></pre> <p>\u8fd9\u6837\u5185\u5b58\u642c\u79fb\u662f\u5426\u6709\u5fc5\u8981\uff0c\u6709\u4eba\u63d0\u51fa\u4e00\u79cd\u66f4\u4e3a\u7b80\u6d01\u7684\u65b9\u6cd5\uff1a</p> <p>\u53ef\u4ee5\u76f4\u63a5\u5c06\u4f20\u5165\u7684\u53c2\u6570\u7684\u5730\u5740\u5f3a\u8f6c\u4e3a <code>uint32_t</code> \u7c7b\u578b\u7684\u6307\u9488\uff0c\u7136\u540e\u89e3\u5f15\u7528\u3002\u76f8\u5f53\u4e8e\u5c06 <code>value</code> \u4e2d\u6240\u5360\u7684\u5185\u5b58\u6309\u7167 <code>uint32_t</code> \u65b9\u5f0f\u91cd\u65b0\u89e3\u91ca\u3002\u8fd4\u56de\u65f6\u7528\u76f8\u4f3c\u7684\u65b9\u6cd5\u518d\u5c06\u5176\u6240\u5360\u7684\u5185\u5b58\u91cd\u65b0\u89e3\u91ca\u4e3a <code>float</code> \u6570\u636e\u5e76\u8fd4\u56de\u3002\uff08\u4f7f\u7528 C++ \u98ce\u683c\u7684 <code>reinterpret_cast&lt;T&gt;</code> \u4e5f\u662f\u76f8\u540c\u7684\u542b\u4e49\uff09\u3002</p> <pre><code>float SwapFloat(const float &amp;value)\n{\n    uint32_t swappedBit = SwapUint32T(*(uint32_t *)&amp;value);\n    return *(float *)&amp;swappedBit;\n}\n</code></pre> <p>\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u4e86\u7c7b\u578b\u53cc\u5173 (Type Punning)\uff0c\u610f\u5728\u901a\u8fc7\u91cd\u65b0\u89e3\u91ca\u6570\u636e\u7684\u5185\u5b58\u8868\u793a\uff0c\u5c06\u6570\u636e\u4ece\u4e00\u79cd\u7c7b\u578b\u89c6\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002\u7136\u800c\uff0c\u6b64\u5904\u7684\u4f7f\u7528\u65b9\u5f0f\u4f1a\u8fdd\u53cd\u4e25\u683c\u522b\u540d\u89c4\u5219 (Strict Aliasing Rule)\u3002</p> <p>\u4e25\u683c\u522b\u540d\u89c4\u5219 (Strict Aliasing Rule)</p> <p>\u8be5\u89c4\u5219\u4f1a\u5e2e\u52a9\u7f16\u8bd1\u5668\u4f18\u5316\u7a0b\u5e8f\uff0c\u5176\u5047\u8bbe\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u4f1a\u6307\u5411\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740\uff08\u5373\u4e0d\u540c\u7c7b\u578b\u7684\u522b\u540d\u4e0d\u80fd\u6307\u5411\u76f8\u540c\u7684\u5bf9\u8c61\uff09\u3002\u5982\u679c\u6253\u7834\u4e86\u8fd9\u4e2a\u5047\u8bbe\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u751f\u6210\u4e0d\u7b26\u5408\u9884\u671f\u7684\u4ee3\u7801\uff0c\u867d\u7136\u6709\u65f6\u4f1a\u4ea7\u751f\u7b26\u5408\u9884\u671f\u7684\u7ed3\u679c\uff0c\u4f46\u662f\u8bb0\u4f4f\uff0c\u4e0d\u8981\u628a\u8d4c\u6ce8\u62bc\u5728\u672a\u5b9a\u4e49\u884c\u4e3a\u4e0a\u3002</p> <p>\u4e25\u683c\u522b\u540d\u89c4\u5219\u4e2d\u6709\u4e00\u79cd\u4f8b\u5916\u60c5\u51b5\uff0c\u5c31\u662f <code>char*\u3001unsigned char*\u3001signed char *</code>\uff0cC++\u6807\u51c6\u5141\u8bb8\u901a\u8fc7\u8fd9\u4e9b\u6307\u9488\u8bbf\u95ee\u4efb\u4f55\u5bf9\u8c61\u7684\u539f\u59cb\u5b57\u8282\u5e8f\u5217\u3002\u8fd9\u662f\u56e0\u4e3aC++\u6807\u51c6\u4e2d\u7684\u5b57\u8282\u64cd\u4f5c\u6b63\u662f\u901a\u8fc7\u8fd9\u4e09\u79cd\u7c7b\u578b\u5b9a\u4e49\u7684\u3002\u4f8b\u5982\u4ee5\u4e0b\u64cd\u4f5c\u662f\u5b8c\u5168\u5408\u6cd5\u7684\u3002</p> <pre><code>int i = 0;\nchar *buf = (char *)&amp;i; \nbuf[0] = 1;\n</code></pre> <p>\u9664\u4e86\u4f7f\u7528 <code>std::memcpy</code>\uff0cC++20 \u5728 <code>&lt;bit&gt;</code> \u5934\u6587\u4ef6\u4e2d\u8fd8\u5f15\u5165\u4e86 <code>std::bit_cast&lt;T&gt;</code> \u6a21\u677f\u51fd\u6570\uff0c\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u8fd9\u7c7b\u5c06\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\u91cd\u65b0\u89e3\u91ca\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u95ee\u9898\uff1a</p> <pre><code>float SwapFloat(const float &amp;value)\n{\n    uint32_t originBit = std::bit_cast&lt;uint32_t&gt;(value);\n    uint32_t swappedBit = SwapUint32T(originBit);\n    return std::bit_cast&lt;float&gt;(swappedBit);\n}\n</code></pre>"},{"location":"blogs/cpp/01_endianess/#_5","title":"\u5927\u5c0f\u7aef\u8f6c\u6362\u7684\u7b2c\u4e09\u65b9\u5e93\u5b9e\u73b0","text":"<p>\u5728\u6b64\u9009\u62e9\u4e00\u4e2a\u7b80 (w\u01d2) \u6d01 (n\u00e9ng) \u660e (k\u00e0n) \u4e86 (d\u01d2ng) \u7684\u7b2c\u4e09\u65b9\u5927\u5c0f\u7aef\u8f6c\u6362\u5e93 Giant\uff0c\u6765\u5b66\u4e60\u522b\u4eba\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002</p> <p>\u9996\u5148\u8be5\u5e93\u63a2\u67e5\u4e86\u4e00\u7cfb\u5217\u5b8f\u5b9a\u4e49\u7528\u4e8e\u63a8\u6d4b\u7cfb\u7edf\u5b57\u8282\u5e8f\u3002\u8fd9\u4e9b\u5b8f\u6709\u7684\u76f4\u63a5\u6307\u540d\u5927\u5c0f\u7aef\u7c7b\u578b\uff0c\u6709\u7684\u4ee3\u8868\u7684\u662f\u7cfb\u7edf\u67b6\u6784\u3002</p> <pre><code>#if defined(_LITTLE_ENDIAN) || (defined(BYTE_ORDER) &amp;&amp; defined(LITTLE_ENDIAN) &amp;&amp; BYTE_ORDER == LITTLE_ENDIAN) ||       \\\n    (defined(_BYTE_ORDER) &amp;&amp; defined(_LITTLE_ENDIAN) &amp;&amp; _BYTE_ORDER == _LITTLE_ENDIAN) ||                              \\\n    (defined(__BYTE_ORDER) &amp;&amp; defined(__LITTLE_ENDIAN) &amp;&amp; __BYTE_ORDER == __LITTLE_ENDIAN) || defined(__i386__) ||     \\\n    defined(__alpha__) || defined(__ia64) || defined(__ia64__) || defined(_M_IX86) || defined(_M_IA64) ||              \\\n    defined(_M_ALPHA) || defined(__amd64) || defined(__amd64__) || defined(_M_AMD64) || defined(__x86_64) ||           \\\n    defined(__x86_64__) || defined(_M_X64)\nenum\n{\n    xinu_type = 0,\n    unix_type = 1,\n    nuxi_type = 2,\n    type = xinu_type,\n    is_little = 1,\n    is_big = 0\n};\n#elif defined(_BIG_ENDIAN) || (defined(BYTE_ORDER) &amp;&amp; defined(BIG_ENDIAN) &amp;&amp; BYTE_ORDER == BIG_ENDIAN) ||              \\\n    (defined(_BYTE_ORDER) &amp;&amp; defined(_BIG_ENDIAN) &amp;&amp; _BYTE_ORDER == _BIG_ENDIAN) ||                                    \\\n    (defined(__BYTE_ORDER) &amp;&amp; defined(__BIG_ENDIAN) &amp;&amp; __BYTE_ORDER == __BIG_ENDIAN) || defined(__sparc) ||            \\\n    defined(__sparc__) || defined(_POWER) || defined(__powerpc__) || defined(__ppc__) || defined(__hpux) ||            \\\n    defined(_MIPSEB) || defined(_POWER) || defined(__s390__)\nenum\n{\n    xinu_type = 0,\n    unix_type = 1,\n    nuxi_type = 2,\n    type = unix_type,\n    is_little = 0,\n    is_big = 1\n};\n#else\n#error &lt;giant/giant.hpp&gt; says: Middle endian/NUXI order is not supported\nenum\n{\n    xinu_type = 0,\n    unix_type = 1,\n    nuxi_type = 2,\n    type = nuxi_type,\n    is_little = 0,\n    is_big = 0\n};\n#endif\n</code></pre> <p>\u4ee5\u5c0f\u7aef\u90e8\u5206\u7684\u5224\u65ad\u4e3a\u4f8b\uff0c\u5b8f\u5b9a\u4e49\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\u3002</p> <p>\u548c\u5b57\u8282\u5e8f\u6709\u5173\u7684\u7684\u5b8f\uff1a <pre><code>BYTE_ORDER\n__BYTE_ORDER\nLITTLE_ENDIAN\n__LITTLE_ENDIAN\n</code></pre></p> <p>\u548c\u5904\u7406\u5668\u67b6\u6784\u6709\u5173\u7684\u7f16\u8bd1\u5668\u9884\u5b9a\u4e49\u5b8f\uff1a <pre><code>__i386__    # x86 \u67b6\u6784\uff0832\u4f4d\uff09\n\n__amd64     # x86_64 \u67b6\u6784\uff0864\u4f4d\uff09\n__amd64__   # x86_64 \u67b6\u6784\uff0864\u4f4d\uff09\n\n__x86_64    # x86_64 \u67b6\u6784\uff0864\u4f4d\uff09\n__x86_64__  # x86_64 \u67b6\u6784\uff0864\u4f4d\uff09\n\n__alpha__   # Alpha \u5904\u7406\u5668\u67b6\u6784  \n_M_ALPHA    # Alpha \u5904\u7406\u5668\u67b6\u6784\n\n__ia64      # Itanium 64 \u4f4d\u67b6\u6784\n__ia64__    # Itanium 64 \u4f4d\u67b6\u6784\n_M_IA64     # Itanium 64 \u4f4d\u67b6\u6784\n\n_M_IX86     # MSVC \u7f16\u8bd1\u5668\u4e0b\u7684 x86 \u5b8f\uff0c\u8868\u793a 32 \u4f4d x86 \u5904\u7406\u5668\u3002\n\n_M_AMD64    # MSVC \u7f16\u8bd1\u5668\u4e0b\u7684 64 \u4f4d\u5904\u7406\u5668\u5b8f\n_M_X64      # MSVC \u7f16\u8bd1\u5668\u4e0b\u7684 64 \u4f4d\u5904\u7406\u5668\u5b8f\n</code></pre></p> <p>\u5176\u4e2d\u5173\u4e8e\u5904\u7406\u5668\u67b6\u6784\u7684\u5b8f\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u9884\u5b9a\u4e49\u7684\u3002\u548c\u5b57\u8282\u5e8f\u6709\u5173\u7684\u5b8f\u5747\u6765\u81ea\u5934\u6587\u4ef6 <code>&lt;endian.h&gt;</code>\u3002</p> <p>\u7f16\u8bd1\u5668\u9884\u5b9a\u4e49\u5b8f</p> <p>\u7f16\u8bd1\u5668\u7684\u9884\u5b9a\u4e49\u5b8f\u4e3b\u8981\u7528\u4e8e\u5e2e\u52a9\u7a0b\u5e8f\u6839\u636e\u7f16\u8bd1\u65f6\u73af\u5883\u6765\u8fdb\u884c\u6761\u4ef6\u7f16\u8bd1\uff0c\u4ece\u800c\u7f16\u5199\u8de8\u5e73\u53f0\u3001\u8de8\u67b6\u6784\u6216\u4e0e\u7279\u5b9a\u7f16\u8bd1\u5668\u529f\u80fd\u517c\u5bb9\u7684\u4ee3\u7801\u3002  </p> <p>\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6307\u4ee4\u67e5\u770b\u7f16\u8bd1\u5668\u9884\u5b9a\u4e49\u7684\u5b8f\uff1a</p> <pre><code>touch foo.h\ncpp -dM -E foo.h\n</code></pre> <p>\u5176\u4e2d -E \u610f\u4e3a\u6267\u884c\u5230\u9884\u5904\u7406\u5b8c\u6210\u7ed3\u675f\uff0c-dM \u610f\u4e3a\u663e\u793a\u6240\u6709\u7684\u5b8f\u5b9a\u4e49\uff08\u5305\u62ec\u9884\u5b9a\u4e49\u5b8f\uff09\u3002    </p> <p>gcc \u624b\u518c\u4e2d\u4e5f\u5bf9 -dM \u9009\u9879\u663e\u793a\u6240\u6709\u5b8f\u5b9a\u4e49\u7684\u529f\u80fd\u505a\u51fa\u4e86\u89e3\u91ca</p> <pre><code>-dM\n\nInstead of the normal output, generate a list of \u2018#define\u2019 directives for \nall the macros defined during the execution of the preprocessor, including predefined macros. \nThis gives you a way of finding out what is predefined in your version of the preprocessor. \n\nAssuming you have no file foo.h, the command\ntouch foo.h; cpp -dM foo.h\nshows all the predefined macros.\n</code></pre> <p>\u5176\u4e2d -d \u610f\u4e3a\u542f\u7528\u7279\u5b9a\u7f16\u8bd1\u5668\u9636\u6bb5\u7684 \u8f6c\u5b58\u50a8\uff08dump\uff09 \u529f\u80fd\uff0c\u540e\u9762\u7684\u6240\u63a5\u7684\u5b57\u6bcd\u610f\u4e3a\u8f6c\u5b58\u50a8\u7684\u5177\u4f53\u5185\u5bb9\uff0cM \u8868\u793a \u8f93\u51fa\u5b8f\u5b9a\u4e49\uff08macro\uff09\uff0c\u5305\u62ec\u7f16\u8bd1\u5668\u9884\u5b9a\u4e49\u7684\u548c\u7528\u6237\u5b9a\u4e49\u7684\uff0c\u5e76\u4e14\u662f\u76f4\u63a5\u5728\u9884\u5904\u7406\u9636\u6bb5\u5b8c\u6210\u7684\u3002\u5b9e\u9645\u4e0a\uff0c-dM \u9009\u9879\u5fc5\u987b\u914d\u5408 -E \u4f7f\u7528\uff0c\u4ee5\u786e\u4fdd\u5b83\u53ea\u8fdb\u884c\u9884\u5904\u7406\uff0c\u800c\u4e0d\u8fdb\u5165\u540e\u7eed\u7684\u7f16\u8bd1\u9636\u6bb5\u3002</p> <p>\u6211\u6240\u4f7f\u7528\u7684 gcc version 14.2.1 20240805 \u7f16\u8bd1\u5668\u9884\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u4e24\u4e2a\u5b8f\uff0c\u4f46\u662f\u8be5\u5e93\u5e76\u6ca1\u6709\u5229\u7528\u8fd9\u4e24\u4e2a\u5b8f\u4f5c\u4e3a\u5224\u65ad\u4f9d\u636e\u3002 <pre><code>#define __ORDER_LITTLE_ENDIAN__ 1234\n#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\n</code></pre></p> <p>\u9002\u914d\u591a\u79cd\u7c7b\u578b\u7684\u5927\u5c0f\u7aef\u4e92\u8f6c\u6a21\u677f\u51fd\u6570 <code>T swap(T out)</code> \u662f\u8be5\u5e93\u7684\u6838\u5fc3\u3002\u5728\u8be5\u51fd\u6570\u7684\u5f00\u7aef\uff0c\u4f5c\u8005\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9759\u6001\u8054\u5408\u4f53\uff08union\uff09\uff0c\u5229\u7528\u8054\u5408\u4f53\u548c\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u7684\u7279\u6027\uff0c\u5b9e\u73b0\u4e86\u5728\u8fd0\u884c\u65f6\u9a8c\u8bc1\u5b57\u8282\u5e8f\u63a8\u6d4b\u7ed3\u8bba\u662f\u5426\u6b63\u786e\u3002</p> <pre><code>template &lt;typename T&gt; T swap(T out)\n{\n    static union autodetect {\n        int word;\n        char byte[sizeof(int)];\n        autodetect() : word(1)\n        {\n            assert\n            (\n                (\n                    \"&lt;giant/giant.hpp&gt; says: wrong endianness detected!\", \n                    (!byte[0] &amp;&amp; is_big) || (byte[0] &amp;&amp; is_little)\n                )\n            );\n        }\n    } _;\n\n    // ...\n}\n</code></pre> <p>\u8054\u5408\u4f53\u4e2d\u6709\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u548c\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a <code>sizeof(int)</code>\uff0c\u7528\u4e8e\u6309\u5b57\u8282\u67e5\u770b\u6574\u578b\u53d8\u91cf\u3002 <code>static</code> \u5173\u952e\u5b57\u8868\u793a\u8054\u5408\u4f53\u7684\u5b9e\u4f8b\u662f\u9759\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u53ea\u4f1a\u5728\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5185\u88ab\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u5e76\u5728\u591a\u6b21\u8c03\u7528 <code>T swap(T out)</code> \u51fd\u6570\u65f6\u5171\u4eab\u3002</p> <p>\u8054\u5408\u4f53\u7684\u6784\u9020\u51fd\u6570\u4e2d\u5229\u7528\u521d\u59cb\u5316\u5217\u8868\u5c06 <code>word</code> \u53d8\u91cf\u521d\u59cb\u5316\u4e3a <code>1</code>\u3002\u5bf9\u4e8e\u4e00\u4e2aint\u7c7b\u578b\u7684\u503c <code>1</code>\uff0c\u5b83\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f <code>0x 00 00 00 01</code>\u3002</p> <p>\u968f\u540e\u5728\u6784\u9020\u51fd\u6570\u4e2d\u901a\u8fc7\u65ad\u8a00\u9a8c\u8bc1\u7cfb\u7edf\u5b57\u8282\u5e8f\uff0c\u8fd9\u91cc\u53d1\u751f\u4e86\u4e24\u4ef6\u503c\u5f97\u5173\u6ce8\u7684\u4e8b\u60c5\u3002</p> <pre><code>assert\n(\n    (\n        \"&lt;giant/giant.hpp&gt; says: wrong endianness detected!\", \n        (!byte[0] &amp;&amp; is_big) || (byte[0] &amp;&amp; is_little)\n    )\n);\n</code></pre> <ul> <li><code>assert</code> \u5b8f\u5b9e\u9645\u4e0a\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u4f5c\u8005\u5229\u7528\u9017\u53f7\u8fd0\u7b97\u7b26\u53ea\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u9017\u53f7\u540e\u9762\u7684\u8fd0\u7b97\u7ed3\u679c\u7684\u7279\u6027\uff0c\u4f7f\u5f97\u5982\u679c\u65ad\u8a00\u89e6\u53d1\uff0c\u65e2\u80fd\u591f\u6253\u5370\u9017\u53f7\u524d\u7684\u51fa\u9519\u8bef\u63d0\u793a\u4fe1\u606f\uff0c\u53c8\u80fd\u591f\u5224\u65ad\u9017\u53f7\u540e\u7684\u65ad\u8a00\u89e6\u53d1\u6761\u4ef6\u3002</li> </ul> <p>\u9017\u53f7\u8fd0\u7b97\u7b26</p> <p>\u9017\u53f7\u8fd0\u7b97\u7b26\uff08,\uff09\u7528\u4e8e\u987a\u5e8f\u6267\u884c\u591a\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5b83\u53ef\u4ee5\u5728\u8bb8\u591a\u573a\u666f\u4e0b\u4f7f\u7528\uff0c\u6bd4\u5982\u5728\u5faa\u73af\u4e2d\uff0c\u6216\u5728\u58f0\u660e\u548c\u521d\u59cb\u5316\u591a\u4e2a\u53d8\u91cf\u65f6\u3002 \u5f53\u4f7f\u7528\u9017\u53f7\u8fd0\u7b97\u7b26\u65f6\uff0c\u591a\u4e2a\u8868\u8fbe\u5f0f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u6267\u884c\uff0c\u4f46\u4ec5\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 <pre><code>int a = 1, b = 2;\nint result = (a += 2, b += 3);\n// a = 3, b = 5, result = 5\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff1aa += 2 \u5148\u6267\u884c\uff0c\u5c06 a \u7684\u503c\u53d8\u4e3a 3\u3002\u7136\u540e\u6267\u884c b += 3\uff0c\u5c06 b \u7684\u503c\u53d8\u4e3a 5\u3002\u6700\u540e\uff0c\u8fd4\u56de b += 3 \u7684\u7ed3\u679c\uff0c\u5373 5\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9 result</p> <p>assert \u4e0e NDEBUG \u5b8f</p> <p>\u7531\u4e8e <code>assert</code> \u65ad\u8a00\u4ec5\u5728 <code>NDEBUG</code> \u6ca1\u6709\u5b9a\u4e49\u65f6\u6709\u6548\uff0c\u5f53\u4ee3\u7801\u4ee5 <code>CMAKE_BUILD_TYPE</code> \u4e3a <code>Release</code> \u65f6\u7f16\u8bd1\u65f6\uff0c\u4e0d\u4f1a\u5b9a\u4e49 <code>NDEBUG</code> \u5b8f\uff0c\u4e5f\u5c31\u662f\u8bf4 <code>Release</code> \u6a21\u5f0f\u4e0b\u6240\u6709 <code>assert</code> \u65ad\u8a00\u4f1a\u5931\u6548\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u5e38\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u53ef\u4f9b\u53c2\u8003\uff1a</p> <p>\u65b9\u6cd5\u4e00\uff1a\u76f4\u63a5\u4f7f\u7528 <code>if</code> \u8fdb\u884c\u663e\u5f0f\u68c0\u67e5 <pre><code>if ((!byte[0] &amp;&amp; is_big) || (byte[0] &amp;&amp; is_little)) \n{\n    // \u5b57\u8282\u5e8f\u6b63\u786e\n} \nelse \n{\n    throw std::runtime_error(\"&lt;giant/giant.hpp&gt; says: wrong endianness detected!\");\n}\n</code></pre> \u8fd9\u79cd\u5904\u7406\u65b9\u5f0f\u6ca1\u6709\u5b8f\u548c\u6761\u4ef6\u7f16\u8bd1\u76f8\u5173\u7684\u590d\u6742\u6027\uff0c\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\u53ef\u63a7\u3002\u4f46\u662f\u5982\u679c\u6709\u5927\u91cf\u7684\u65ad\u8a00\uff0c\u6240\u6709\u65ad\u8a00\u90fd\u8f6c\u6362\u6210 if \u8bed\u53e5\u4f1a\u589e\u52a0\u4ee3\u7801\u5197\u4f59\uff0c\u5e76\u4e14\u663e\u5f97\u5197\u957f\u3002</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 <code>MyAssert</code> \u51fd\u6570 <pre><code>template&lt;typename T&gt;\nvoid MyAssert(bool condition, T message) {\n    if (!condition) {\n        std::cerr &lt;&lt; message &lt;&lt; std::endl;\n        std::abort();\n    }\n}\n</code></pre></p> <p>\u65b9\u6cd5\u4e09\uff1a\u5728 <code>Release</code> \u6a21\u5f0f\u4e0b\u4ecd\u7136\u5f00\u542f <code>NDEBUG</code> \u5b8f</p> <pre><code>set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -UNDEBUG\")\n</code></pre> <pre><code>assert\n(\n    (\n        \"&lt;giant/giant.hpp&gt; says: wrong endianness detected!\", \n        (!byte[0] &amp;&amp; is_big) || (byte[0] &amp;&amp; is_little)\n    )\n);\n</code></pre> <ul> <li>\u65ad\u8a00\u7684\u540e\u534a\u90e8\u5206\u662f\u9996\u5148\u5224\u65ad\u4e86 <code>byte[0]</code>\uff08<code>word</code> \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff09\u3002\u5982\u679c\u7cfb\u7edf\u662f\u5c0f\u7aef\u5e8f\uff0c\u90a3\u4e48 <code>1</code> \u7684\u6700\u4f4e\u6709\u6548\u5b57\u8282\u4f1a\u5b58\u50a8\u5728\u6700\u4f4e\u5730\u5740\uff0c\u6240\u4ee5 <code>byte[0] == 1</code>\u3002\u5982\u679c\u662f\u5927\u7aef\u5e8f\uff0c\u6700\u9ad8\u6709\u6548\u5b57\u8282\u4f1a\u5728\u6700\u4f4e\u5730\u5740\uff0c\u6240\u4ee5 <code>byte[0] == 0</code>\u3002\u518d\u901a\u8fc7\u548c\u6700\u524d\u9762\u901a\u8fc7\u5b8f\u5b9a\u4e49\u5f97\u5230\u7684\u7ed3\u8bba\u5bf9\u6bd4\uff0c\u5c31\u80fd\u9a8c\u8bc1\u6b64\u524d\u5927\u5c0f\u7aef\u7ed3\u8bba\u63a8\u6d4b\u662f\u5426\u6b63\u786e\u3002\u4e00\u65e6\u9a8c\u8bc1\u5931\u8d25\uff0c\u5c31\u4f1a\u89e6\u53d1\u65ad\u8a00\u3002</li> </ul> <p>\u8054\u5408\u4f53\u4e2d\u8bbf\u95ee\u975e\u6d3b\u52a8\u6210\u5458\u7684\u4f8b\u5916\u60c5\u51b5</p> <p>C++ \u6807\u51c6\u4e2d\uff0c\u8054\u5408\u4f53\u4e2d\u7684\u6d3b\u52a8\u6210\u5458\u662f\u6700\u8fd1\u4e00\u6b21\u5199\u5165\u7684\u6210\u5458\u3002\u5f53\u8054\u5408\u4f53\u7684\u67d0\u4e2a\u6210\u5458\u88ab\u8d4b\u503c\u65f6\uff0c\u8fd9\u4e2a\u6210\u5458\u5c31\u6210\u4e3a\u6d3b\u52a8\u6210\u5458\u3002\u5982\u679c\u5728\u67d0\u4e00\u65f6\u523b\u8bbf\u95ee\u4e86\u4e0d\u662f\u6d3b\u52a8\u6210\u5458\u7684\u5176\u4ed6\u6210\u5458\uff0c\u5c06\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u4f46\u662f\u8fd9\u91cc\u6784\u9020\u51fd\u6570\u53ea\u6307\u5b9a\u4e86\u6210\u5458 <code>word</code> \u7684\u503c\uff0c\u4f46\u662f\u5374\u8bbf\u95ee\u4e86\u975e\u6d3b\u52a8\u6210\u5458 <code>char</code> \u6570\u7ec4\uff0c\u8fd9\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u5417\uff1f</p> <p>\u867d\u7136 C++ \u5bf9\u8054\u5408\u4f53\u8de8\u6210\u5458\u8bbf\u95ee\u8981\u6c42\u4e25\u683c\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4f8b\u5916\u60c5\u51b5\u5373\u5f53\u5176\u4ed6\u6210\u5458\u662f\u5e03\u5c40\u517c\u5bb9\u7c7b\u578b\uff08layout-compatible types\uff09\u65f6\u5141\u8bb8\u8bbf\u95ee\u975e\u6d3b\u52a8\u6210\u5458\uff0c\u5e38\u89c1\u7684\u5e03\u5c40\u517c\u5bb9\u60c5\u51b5\u5305\u542b\u540c\u4e00\u57fa\u672c\u7c7b\u578b\u7684\u4e0d\u540c\u522b\u540d\u3001\u5b57\u8282\u6570\u7ec4\u4e0e\u4efb\u4f55\u7c7b\u578b\u3001\u6807\u51c6\u5e03\u5c40\u7c7b\u578b\u3002\u5728\u8fd9\u91cc\u5c5e\u4e8e\u7b2c\u4e8c\u7c7b\u60c5\u51b5\uff0c\u5373\u5b57\u8282\u6570\u7ec4\u4e0e\u4efb\u4f55\u7c7b\u578b\uff1a<code>char[]</code> \u6216 <code>unsigned char[]</code> \u53ef\u4ee5\u5b89\u5168\u5730\u8bfb\u53d6\u548c\u5199\u5165\u4efb\u4f55\u7c7b\u578b\u7684\u5185\u5b58\u3002\u8fd9\u662f\u56e0\u4e3a C++ \u6807\u51c6\u5141\u8bb8\u901a\u8fc7 <code>char</code> \u6216 <code>unsigned char</code> \u8bbf\u95ee\u4efb\u4f55\u5bf9\u8c61\u7684\u5e95\u5c42\u5b57\u8282\u8868\u793a\u3002\u8fd9\u540c\u6837\u4e5f\u662f\u4e00\u79cd\u7c7b\u578b\u53cc\u5173\u3002</p> <p>\u6700\u540e\u8fdb\u5165\u6b63\u9898\uff1a\u8be5\u5e93\u7684\u5927\u5c0f\u7aef\u4e92\u8f6c\u6a21\u677f\u51fd\u6570</p> <pre><code>template &lt;typename T&gt; T swap(T out)\n{\n    static union autodetect {\n        int word;\n        char byte[sizeof(int)];\n        autodetect() : word(1)\n        {\n            assert(\n                (\"&lt;giant/giant.hpp&gt; says: wrong endianness detected!\", (!byte[0] &amp;&amp; is_big) || (byte[0] &amp;&amp; is_little)));\n        }\n    } _;\n\n    if (!std::is_pod&lt;T&gt;::value)\n    {\n        return out;\n    }\n\n    char *ptr;\n\n    switch (sizeof(T))\n    {\n    case 0:\n    case 1:\n        break;\n    case 2:\n        ptr = reinterpret_cast&lt;char *&gt;(&amp;out);\n        std::swap(ptr[0], ptr[1]);\n        break;\n    case 4:\n        ptr = reinterpret_cast&lt;char *&gt;(&amp;out);\n        std::swap(ptr[0], ptr[3]);\n        std::swap(ptr[1], ptr[2]);\n        break;\n    case 8:\n        ptr = reinterpret_cast&lt;char *&gt;(&amp;out);\n        std::swap(ptr[0], ptr[7]);\n        std::swap(ptr[1], ptr[6]);\n        std::swap(ptr[2], ptr[5]);\n        std::swap(ptr[3], ptr[4]);\n        break;\n    case 16:\n        ptr = reinterpret_cast&lt;char *&gt;(&amp;out);\n        std::swap(ptr[0], ptr[15]);\n        std::swap(ptr[1], ptr[14]);\n        std::swap(ptr[2], ptr[13]);\n        std::swap(ptr[3], ptr[12]);\n        std::swap(ptr[4], ptr[11]);\n        std::swap(ptr[5], ptr[10]);\n        std::swap(ptr[6], ptr[9]);\n        std::swap(ptr[7], ptr[8]);\n        break;\n    default:\n        assert(!\"&lt;giant/giant.hpp&gt; says: POD type bigger than 256 bits (?)\");\n        break;\n    }\n\n    return out;\n}\n</code></pre> <p>\u8be5\u5e93\u4e2d\u6ca1\u6709\u4e3a\u5404\u7c7b\u5b57\u8282\u957f\u5ea6\u4e0d\u540c\u7684\u7c7b\u578b\u5206\u522b\u7f16\u5199\u51fd\u6570\uff0c\u800c\u662f\u5229\u7528\u6a21\u677f\u51fd\u6570\u7edf\u4e00\u5904\u7406\uff0c\u518d\u5229\u7528 <code>sizeof</code> \u64cd\u4f5c\u7b26\u5224\u65ad\u957f\u5ea6\u5e76\u5904\u7406\u3002</p> <p>\u5728\u5224\u65ad\u4f20\u5165\u7684\u7c7b\u578b\u5360\u7528\u7684\u5b57\u8282\u6570\u540e\uff0c\u4f5c\u8005\u4f7f\u7528\u4e86\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u7c7b\u578b\u53cc\u5173\u4e2d\u4e0d\u8fdd\u53cd\u4e25\u683c\u522b\u540d\u89c4\u5219\u7684\u4f8b\u5916\u60c5\u51b5\uff1a\u4f7f\u7528 <code>char *</code> \u7c7b\u578b\u91cd\u65b0\u89e3\u91ca\uff0c\u7136\u540e\u4f7f\u7528 <code>std::swap()</code> \u5b8c\u6210\u5b57\u8282\u5e8f\u5217\u4ea4\u6362\u3002</p>"},{"location":"blogs/cpp/01_endianess/#_6","title":"\u53c2\u8003","text":"<ul> <li> <p>Draft C++17 standard is freely available here</p> </li> <li> <p>Latest Draft C++ Standard</p> </li> <li> <p>What is Strict Aliasing and Why do we Care?</p> </li> <li> <p>Preprocessor Options (Using the GNU Compiler Collection (GCC))</p> </li> <li> <p>Giant: A tiny C++11 library to handle little/big endianness.</p> </li> </ul> <p>\u521b\u5efa\u4e8e\uff1a<code>2024-09-23</code></p> <p>\u7f16\u8f91\u4e8e\uff1a<code>2024-09-23</code></p>"}]}